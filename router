#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, math

#DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('asn', type=int, help="AS Number")
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


class updateMes:
    srcif = None
    src = None
    dst = None
    #typ = "update"
    network = None
    netmask = None
    localpref = None
    selfOrigin = None
    ASPath = None
    origin = None
    packet = None

    def __init__(self, srcif, packet, s, d, netw, netm, lp, so, asp, ori):
        self.srcif = srcif
        self.packet = packet
        self.src = s
        self.dst = d
        self.network = netw
        self.netmask = netm
        self.localpref = lp
        self.selfOrigin = so
        self.ASPath = asp
        self.origin = ori

class revokeMes:
    src = None
    dst = None
    networks = None
    netmasks = None

    def __init__(self, src, dst, networks, netmasks):
        self.src = src
        self.dst = dst
        self.networks = networks
        self.netmasks = netmasks

class tableEntry:
    ntwork = None
    ntmask = None
    peer = None
    localpref = None
    selfOrigin = None
    ASPath = None
    origin = None

    def __init__(self, ntw, ntm, p, lp, so, asp, o):
        self.ntwork = ntw
        self.ntmask = ntm
        self.peer = p
        self.localpref = lp
        self.selfOrigin = so
        self.ASPath = asp
        self.origin = o

##########################################################################################

class Router:

    routes = None
    updates = None
    relations = None
    sockets = None
    table = None
    socketReal = None
    asp = None
    netw = None
    revokes = None

    def __init__(self, networks, asn):
        self.routes = []
        self.updates = []
        self.relations = {}
        self.sockets = {}
        self.socketsReal = []
        self.table = []
        self.asp = asn
        self.netw = []
        self.revokes = []
        #print("self asp: " + self.asp)
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG: 
                print("Starting socket for", network, relation)
            sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.socketsReal.append(sock)
            self.sockets[network] = sock#socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
            self.netw.append(network)
        return

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        # TODO
        outroutes = []
        addrParts = daddr.split(".")
        
        for t in self.table:
            net = t.ntwork
            src = t.peer
            tableParts = net.split(".")
            
            add = True
            x = 0
            y = 0
            soFar = True
            print("addresses comparing from table: " + daddr + " " + net)
            while x < len(addrParts):
                
                if addrParts[x] == tableParts[x] or tableParts[x] == "0" or addrParts[x] == "0" and soFar:
                    add = add and True #CHANGED TO OR@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                    y = y + 1
                else:
                    add = False
                    soFar = False
                x = x + 1
            
            if add or y > 0:
                outroutes.append(t)
            	
        for r in outroutes:
            print("networks: " + r.ntwork)
        print("next func")
        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
        #print("route type", type(routes))
        shortest = routes[0]
        tied = []
        for r in routes:
            path = r.ASPath
            if path < shortest.ASPath:
                highest = r
                tied = []
            elif path == shortest.ASPath and r != shortest:
                tied.append(r)
        outroutes = tied
        outroutes.append(shortest)
        for r in outroutes:
            print("networks: " + r.ntwork)
        print("next func")
        return outroutes
            
    def get_highest_preference(self, routes):
        """ select the route with the highest localpref """
        # TODO
        outroutes = []
        highest = routes[0]
        tied = []
        for r in routes:
            pref = r.localpref
            if pref > highest.localpref:
                highest = r
                tied = []
            elif pref == highest.localpref and r != highest:
                tied.append(r)
        outroutes = tied
        outroutes.append(highest)
        for r in outroutes:
            print("networks: " + r.ntwork)
        print("next func")
        return outroutes
         
    def get_self_origin(self, routes):
        """ select self originating routes """
        # TODO
        outroutes = []
        t = []
        for r in routes:
            if r.selfOrigin:
                t.append(r)
        if len(t) == 0:
            outroutes = routes
        else:
            outroutes = t
        for r in outroutes:
            print("networks: " + r.ntwork)
        print("next func")
        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: IGP > EGP > UNK """
        # TODO
        outroutes = []
        igp = []
        egp = []
        unk = []
        for r in routes:
            if r.origin == "IGP":
                igp.append(r)
            elif r.origin == "EGP":
                egp.append(r)
            elif r.origin == "UNK":
                unk.append(r)
        if len(igp) != 0:
            outroutes = igp
        elif len(egp) != 0:
            outroutes = egp
        else:
            outroutes = unk
        for r in outroutes:
            print("networks: " + r.ntwork)
        print("next func")
        return outroutes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        
        socks = self.socketsReal
        #for n in self.netw:
        for s in socks:
            for n in self.netw: #new   
                for sock in self.sockets:
                    if self.sockets[n] == s:
                        if n == srcif:
                            relation1 = self.relations[n]
             
        
        for r in routes:
            
            #for n in self.netw:
                for s in socks:
                    for n in self.netw: #for sock in self.sockets:
                        if self.sockets[n] == s: #used to take sock
                            if n == r.peer:
                                relation2 = self.relations[n]
                                
                                condition1 = relation1 == "peer" and relation2 == "peer"
                                condition2 = relation1 == "peer" and relation2 == "prov"
                                condition3 = relation1 == "prov" and relation2 == "peer"
                                if (not condition1) and (not condition2) and (not condition3):
                                    outroutes.append(r)
                
        for r in outroutes:
            print("networks: " + r.ntwork)
        print("next func")
        return outroutes

    def longestPrefix(self, srcif, routes, daddr):
        outroutes = []
        print("address: " + daddr)
        addrParts = daddr.split(".")
        
        if len(routes) == 0:
            return routes

        currentLongest = []
        currentLongest.append(routes[0])

        net = currentLongest[0].ntwork
        src = currentLongest[0].peer
        tableParts = net.split(".")
        print("first route: " + str(net))
        
        x = 0
        tempLong = 0
        soFar = True
        while x < len(addrParts):

            if addrParts[x] == tableParts[x] and soFar:
                tempLong = x + 1
            else:
                soFar = False
            x = x + 1
        
        currentLongestLen = tempLong
        print("first longest len: " + str(currentLongestLen))

        for t in routes:
            net = t.ntwork
            print("all the networks in table: " + str(net))
            src = t.peer
            tableParts = net.split(".")
            print("other routes: " + str(net))
            x = 0
            tempLong = 0
            soFar = True
            while x < len(addrParts):

                if addrParts[x] == tableParts[x] and soFar:
                    tempLong = x + 1
                else:
                    soFar = False
                x = x + 1

            print("length of tempLong and currentLonestlen: " + str(tempLong) + " " + str(currentLongestLen))
            if tempLong > currentLongestLen:
                currentLongestLen = tempLong
                currentLongest = []
                currentLongest.append(t)
            elif tempLong == currentLongestLen:
                currentLongest.append(t)
        
        outroutes = currentLongest
        for r in outroutes:
            print("networks: " + r.ntwork)
        print("next func")
        return outroutes


    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        # TODO
        peer = None
        
        routes = self.lookup_routes(daddr)
        # Rules go here
        if routes:
            print("length of routes0: " + str(len(routes)))
            routes = self.longestPrefix(srcif, routes, daddr)
            #i 1. Highest Preference
            print("length of routes1: " + str(len(routes)))
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            print("length of routes2: " + str(len(routes)))
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            print("length of routes3: " + str(len(routes)))
            routes = self.get_shortest_as_path(routes)
            # 4. IGP > EGP > UNK
            print("length of routes4: " + str(len(routes)))
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            # TODO
            # Final check: enforce peering relationships
            print("length of routes5: " + str(len(routes)))
            routes = self.filter_relationships(srcif, routes)
            print("length of routes6: " + str(len(routes)))
            #longest prefix matching 
            #routes = self.longestPrefix(srcif, routes, daddr)
        print("LEN OR ROUTES: " + str(len(routes)))
        if len(routes) > 0:
            peer = routes[0].peer
        #print("peer: " + str(peer.ntwork))    
        return peer if peer else None #self.sockets[peer] if peer else None

    def forward(self, srcif, packet):
        """	Forward a data packet	"""
        # TODO
        #think I need to look at the destination of the given data message and see what table entry it matches
        #and then if it matches the table take the source which sent that message from the table and 
        #send the data message to only them?
        m1 = json.dumps(packet)
        m = json.loads(m1)
        
        socks = self.socketsReal
        
        
        net = m['dst']
        
        sendto = self.get_route(srcif, net)
        #print("SENDTO: " + sendto)
        for s in socks:
            for n in self.netw: #new   
                for sock in self.sockets:
                    if self.sockets[n] == s:
                        #print("n and sendto and srcif: " + n + " " + sendto + " " + srcif)
                        if n == srcif:
                            relation1 = self.relations[n]
                        if n == sendto:
                            relation2 = self.relations[n]
        
        canSend = False
        if(sendto ==None):
            print("SEND TO IS NONE")
        if sendto != None and (relation1 == "cust" or relation2 == "cust"):
            canSend = True
            #print("relation1 and relation2: " + relation1 + " " +relation2)
        
        print("sendto: " + str(sendto))
        if sendto == None or canSend == False:
             for s in socks:
                 for sock in self.sockets:
                     if self.sockets[sock] == s:
                         if sock == srcif:        
                             m['msg'] = {}
                             m['type'] = "no route"
                             oldSRC = m['src']
                             #m['dst'] = oldSRC[0:len(oldSRC) -1] + "2"
                             m['dst'] = oldSRC
                             m['src'] = sock[0:len(sock) - 1] + "1"
                             eMes = json.dumps(m)
                             s.sendall(bytes(eMes, 'utf-8'))
        else:                 
            for s in socks:
                for sock in self.sockets:
                    if self.sockets[sock] == s:
                        
                        if sock == sendto: #changes
                            
                            eMes = json.dumps(m)
                            s.sendall(bytes(eMes, 'utf-8'))
                            #return True
        
        return True

    def aggNetmask(self, mask):
        newMask = ""
        if mask == "255":
            newMask = 254
        elif mask == "254":
            newMask = 252
        elif mask == "252":
            newMask = 248
        return newMask

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        
        for q in self.table: #range(0, len(self.table)):
            net1 = q.ntwork
            src1 = q.peer
            qParts = net1.split(".")
            for w in self.table: #range(0, len(self.table)):
                if q != w:
                    agg = False
                    net2 = w.ntwork
                    src2 = w.peer
                    wParts = net2.split(".")
                    print("q and w networks: " + q.ntwork + " " + w.ntwork)
                    x = 0
                    temp = 0
                    soFar = True
                    while x < len(qParts):

                        if qParts[x] == wParts[x] and soFar:
                            temp = temp + 1
                        else:
                            soFar = False
                        x = x + 1
                    print("temp: " + str(temp))
                    if temp >= 2:
                        peer = False
                        netmask = False
                        localpref = False
                        ASPath = True
                        origin = False
                        selfOrigin = False
                        
                        if q.peer == w.peer:
                            peer = True
                        if q.ntmask == w.ntmask:
                            netmask = True
                        if q.localpref == w.localpref:
                            localpref = True
                        if len(q.ASPath) == len(w.ASPath):
                            for r in range(0, len(q.ASPath)):
                                if q.ASPath[r] == w.ASPath[r]:
                                    ASPath = ASPath and True
                                else:
                                    ASPath = False
                        if q.selfOrigin == w.selfOrigin:
                            selfOrigin = True
                        if q.origin == w.origin:
                            origin = True
                        if peer and netmask and localpref and ASPath and origin and selfOrigin:
                            agg = True
                    if agg:
                        final = []
                        for qp in qParts:
                            if temp > 0:
                                final.append(qp)
                                temp = temp - 1
                        if int(qParts[2]) < int(wParts[2]):
                            final.append(qParts[2])
                        else:
                            final.apend(wParts[2])
                        while len(final) < 4:
                            final.append(str(0))
                        aggedList = ".".join(final)
                        q.ntwork = aggedList
                        mask = q.ntmask.split(".")
                        masktoEdit = mask[2]
                        maskEdited = self.aggNetmask(masktoEdit)
                        
                        newMask = str(mask[0]) + "." + str(mask[1]) + "." + str(maskEdited) + "." + "0"
                        print(newMask)
                        q.ntmask = newMask
                        self.table.remove(w)

        return True

    """def aggNetmask(self, mask):
        newMask = ""
        if mask == "255":
            newMask = 254
        return newMask"""

    def sendUpdates(self, upMes):
        #have to fix bc packet is actually an isntance of updateMes
        #which is a bunch of fields not json
        #but srcif is within packet which is good atleast
        #I pushed the last sorking version before I started this
        packet = upMes.packet
        srcif = upMes.srcif
        m1 = json.dumps(packet)
        m = json.loads(m1)
        
        socks = self.socketsReal #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        editedMes = m
        msg = m[MESG]
        oldASP = msg['ASPath']
        
        for s in socks:
            for n in self.netw: #new   
                
                    if self.sockets[n] == s:
                        if n == srcif:
                            relation1 = self.relations[n]


        for s in socks:
            for n in self.netw:
                        if self.sockets[n] == s:
                            canSend = False
                            
                            if relation1 == "cust":
                                canSend = True
                            else:
                                #so it was sent by a peer or provider
                                if self.relations[n] == "cust":
                                   canSend = True
                            
                            if n != srcif and canSend:
                                editedMes['dst'] = n
                                z = [self.asp]
                                
                                z = oldASP + z
                                msg['ASPath'] = z
                                
                                newDST = editedMes['dst']
                                editedMes['src'] = newDST[0:len(newDST) - 1] + "1"
                                editedMes['msg'] = msg
                                eMes = json.dumps(editedMes)
                                print("sending message: " + eMes)
                                s.sendall(bytes(eMes, 'utf-8'))
        return True

    def update(self, srcif, packet):
        """	handle update packets	"""
        # TODO
        m1 = json.dumps(packet)
        m = json.loads(m1)
        src = m[SRCE]
        dst = m[DEST]
        typ = m[TYPE]

        msg = m[MESG]
        f1 = json.dumps(msg)
        f = json.loads(f1)
        ntwork = f[NTWK]
        ntmask = f[NMSK]
        origin = f[ORIG]
        lp = f[LPRF]
        aspath = f[APTH]
        sOrigin = f[SORG]
        
        upMes = updateMes(srcif, packet, src, dst, ntwork, ntmask, origin, lp, aspath, sOrigin)
        self.updates.append(upMes)
        #saved an instance of the message

        #adding new instance to table
        t = tableEntry(ntwork, ntmask, src, lp, sOrigin, aspath, origin)
        self.table.append(t)
        
        return True
    
    def revoke(self, packet):
        """	handle revoke packets	"""
        # TODO
        m1 = json.dumps(packet)
        m = json.loads(m1)
        src = m[SRCE]
        dst = m[DEST]
        typ = m[TYPE]

        msg = m[MESG]
        print("type of message: ", type(msg))
        networks = []
        netmasks = []
        for n in msg:
            n1 = json.dumps(n)
            n2 = json.loads(n1)
            netw = n2["network"]
            netm = n2["netmask"]
            networks.append(netw)
            netmasks.append(netm)        

        revMes = revokeMes(src, dst, networks, netmasks)
        self.revokes.append(revMes)
        toRemove = []
        for t in self.table:
            print("within table")
            x = 0
            while x < len(networks):
                print("table network and mask: " + t.ntwork + " " + t.ntmask)
                print("network and mask from list: " + networks[x] + " " + netmasks[x])
                if t.ntwork == networks[x] and t.ntmask == netmasks[x] and t.peer == src:
                    toRemove.append(t)
                x = x + 1

        for r in toRemove:
            self.table.remove(r)
        
        #sending revoke message to neighbors
        
        srcif = src
        
        socks = self.socketsReal #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        editedMes = m
        
        for s in socks:
            for n in self.netw: #new   
                
                    if self.sockets[n] == s:
                        if n == srcif:
                            relation1 = self.relations[n]        

        for s in socks:
            for n in self.netw:
                
                        if self.sockets[n] == s:
                            canSend = False

                            if relation1 == "cust":
                                canSend = True
                            else:
                                #so it was sent by a peer or provider
                                if self.relations[n] == "cust":
                                   canSend = True

                            if n != srcif and canSend:
                                editedMes['dst'] = n

                                newDST = editedMes['dst']
                                editedMes['src'] = newDST[0:len(newDST) - 1] + "1"
                                
                                eMes = json.dumps(editedMes)
                                print("sending message: " + eMes)
                                s.sendall(bytes(eMes, 'utf-8'))

        return True

    def dump(self, srcif, packet):
        """	handles dump table requests	"""
        # TODO
        m1 = json.dumps(packet)
        m = json.loads(m1)
        msg = m[MESG]
        msg = []
        
        for t in self.table:
            msg.append({"network":t.ntwork, "netmask": t.ntmask, "peer": t.peer})
            print("below appending")
                           
        #print("message sending: " + json.dumps(msg))
        
        m[MESG] = msg
        oldsrc = m[SRCE]
        olddes = m[DEST]
        m[DEST] = oldsrc
        m[SRCE] = olddes 
        m[TYPE] = TABL
        print("got here")
        socks = self.socketsReal 
        for s in socks:
            
            for sock in self.sockets:
                        
                        if self.sockets[sock] == s:
                            print("got here2")
                            if sock == srcif:
                                print("should get here once")
                                mes = json.dumps(m)
                                print("full dump message: " + mes)
                                s.sendall(bytes(mes, 'utf-8'))
                                print("after sent dump")
        return True

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        # TODO
        m1 = json.dumps(packet)
        m = json.loads(m1)
        
        t = m["type"]
        if t == DATA:
            return self.forward(srcif, packet)
        elif t == DUMP:
            return self.dump(srcif, packet)
        elif t == UPDT:
            x = self.update(srcif, packet)
            x = x and self.coalesce()
            return x
        elif t == RVKE:
            return self.revoke(packet)
        else:
            return False

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        # TODO
        return

    def run(self):
        lastUpdate = True
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    print(msg)
                    m1 = json.dumps(msg)
                    m = json.loads(m1)
                    t = m["type"]
                    if lastUpdate and t != UPDT:
                        #lsat one was update and now its not
                        #so can send all of the update messages now
                        lastUpdate = False
                        print("can send update messages now")
                        for x in self.updates:
                            #what is the srcif I'm sending?
                            self.sendUpdates(x)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        #now start sending everything
        return



if __name__ == "__main__":
    router = Router(args.networks, args.asn)
    router.run()
